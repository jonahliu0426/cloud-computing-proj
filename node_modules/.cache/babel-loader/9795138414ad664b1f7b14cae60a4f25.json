{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { print } from \"graphql\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { isNonNullObject, Observable } from \"../../utilities/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\n\nfunction isLikeCloseEvent(val) {\n  return isNonNullObject(val) && 'code' in val && 'reason' in val;\n}\n\nvar GraphQLWsLink = function (_super) {\n  __extends(GraphQLWsLink, _super);\n\n  function GraphQLWsLink(client) {\n    var _this = _super.call(this) || this;\n\n    _this.client = client;\n    return _this;\n  }\n\n  GraphQLWsLink.prototype.request = function (operation) {\n    var _this = this;\n\n    return new Observable(function (observer) {\n      return _this.client.subscribe(__assign(__assign({}, operation), {\n        query: print(operation.query)\n      }), {\n        next: observer.next.bind(observer),\n        complete: observer.complete.bind(observer),\n        error: function (err) {\n          if (err instanceof Error) {\n            return observer.error(err);\n          }\n\n          if (isLikeCloseEvent(err)) {\n            return observer.error(new Error(\"Socket closed with event \".concat(err.code, \" \").concat(err.reason || \"\")));\n          }\n\n          return observer.error(new ApolloError({\n            graphQLErrors: Array.isArray(err) ? err : [err]\n          }));\n        }\n      });\n    });\n  };\n\n  return GraphQLWsLink;\n}(ApolloLink);\n\nexport { GraphQLWsLink };","map":{"version":3,"sources":["../../../src/link/subscriptions/index.ts"],"names":[],"mappings":";AA8BA,SAAS,KAAT,QAAsB,SAAtB;AAGA,SAAS,UAAT,QAAmD,kBAAnD;AACA,SAAS,eAAT,EAA0B,UAA1B,QAA4C,0BAA5C;AACA,SAAS,WAAT,QAA4B,uBAA5B;;AASA,SAAS,gBAAT,CAA0B,GAA1B,EAAsC;AACpC,SAAO,eAAe,CAAC,GAAD,CAAf,IAAwB,UAAU,GAAlC,IAAyC,YAAY,GAA5D;AACD;;AAGD,IAAA,aAAA,GAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AACjC,WAAA,aAAA,CAA4B,MAA5B,EAA0C;AAA1C,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;;AAA4B,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;;AAE3B;;AAEM,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,SAAf,EAAmC;AAAnC,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,IAAI,UAAJ,CAAe,UAAC,QAAD,EAAS;AAC7B,aAAO,KAAI,CAAC,MAAL,CAAY,SAAZ,CAAqB,QAAA,CAAA,QAAA,CAAA,EAAA,EACrB,SADqB,CAAA,EACZ;AAAE,QAAA,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,KAAX;AAAd,OADY,CAArB,EAEL;AACE,QAAA,IAAI,EAAE,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,QAAnB,CADR;AAEE,QAAA,QAAQ,EAAE,QAAQ,CAAC,QAAT,CAAkB,IAAlB,CAAuB,QAAvB,CAFZ;AAGE,QAAA,KAAK,EAAE,UAAC,GAAD,EAAI;AACT,cAAI,GAAG,YAAY,KAAnB,EAA0B;AACxB,mBAAO,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAP;AACD;;AAED,cAAI,gBAAgB,CAAC,GAAD,CAApB,EAA2B;AACzB,mBAAO,QAAQ,CAAC,KAAT,CAEL,IAAI,KAAJ,CACE,4BAAA,MAAA,CAA4B,GAAG,CAAC,IAAhC,EAAoC,GAApC,EAAoC,MAApC,CAAwC,GAAG,CAAC,MAAJ,IAAc,EAAtD,CADF,CAFK,CAAP;AAMD;;AAED,iBAAO,QAAQ,CAAC,KAAT,CACL,IAAI,WAAJ,CAAgB;AACd,YAAA,aAAa,EAAE,KAAK,CAAC,OAAN,CAAc,GAAd,IAAqB,GAArB,GAA2B,CAAC,GAAD;AAD5B,WAAhB,CADK,CAAP;AAKD;AAtBH,OAFK,CAAP;AA2BD,KA5BM,CAAP;AA6BD,GA9BM;;AA+BT,SAAA,aAAA;AAAC,CApCD,CAAmC,UAAnC,CAAA","sourcesContent":["// This file is adapted from the graphql-ws npm package:\n// https://github.com/enisdenjo/graphql-ws\n//\n// Most of the file comes from that package's README; some other parts (such as\n// isLikeCloseEvent) come from its source.\n//\n// Here's the license of the original code:\n//\n// The MIT License (MIT)\n//\n// Copyright (c) 2020-2021 Denis Badurina\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport { print } from \"graphql\";\nimport type { Client } from \"graphql-ws\";\n\nimport { ApolloLink, Operation, FetchResult } from \"../core\";\nimport { isNonNullObject, Observable } from \"../../utilities\";\nimport { ApolloError } from \"../../errors\";\n\ninterface LikeCloseEvent {\n  /** Returns the WebSocket connection close code provided by the server. */\n  readonly code: number;\n  /** Returns the WebSocket connection close reason provided by the server. */\n  readonly reason: string;\n}\n\nfunction isLikeCloseEvent(val: unknown): val is LikeCloseEvent {\n  return isNonNullObject(val) && 'code' in val && 'reason' in val;\n}\n\n\nexport class GraphQLWsLink extends ApolloLink {\n  constructor(public readonly client: Client) {\n    super();\n  }\n\n  public request(operation: Operation): Observable<FetchResult> {\n    return new Observable((observer) => {\n      return this.client.subscribe<FetchResult>(\n        { ...operation, query: print(operation.query) },\n        {\n          next: observer.next.bind(observer),\n          complete: observer.complete.bind(observer),\n          error: (err) => {\n            if (err instanceof Error) {\n              return observer.error(err);\n            }\n\n            if (isLikeCloseEvent(err)) {\n              return observer.error(\n                // reason will be available on clean closes\n                new Error(\n                  `Socket closed with event ${err.code} ${err.reason || \"\"}`\n                )\n              );\n            }\n\n            return observer.error(\n              new ApolloError({\n                graphQLErrors: Array.isArray(err) ? err : [err],\n              })\n            );\n          },\n        }\n      );\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}