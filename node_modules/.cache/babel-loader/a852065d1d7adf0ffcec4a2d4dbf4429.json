{"ast":null,"code":"import { gql } from \"apollo-boost\";\nexport const CHECK_IF_USERNAME_TAKEN = gql`\n  query checkIfUsernameTaken($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      username\n    }\n  }\n`;\nexport const GET_USER_EMAIL = gql`\nquery getUserEmail($input: String!) {\n  users(where: {\n    _or: [{username: {_eq: $input}}, {phone_number: {_eq: $input}}]\n  }) {\n    email\n  }\n}\n`;\nexport const GET_EDIT_USER_PROFILE = gql`\nquery getEditUserProfile($id: uuid!) {\n  users_by_pk(id: $id) {\n    id\n    name\n    username\n    website\n    profile_image\n    phone_number\n    email\n    bio\n  }\n}\n`;\nexport const SEARCH_USERS = gql`\nquery searchUsers($query: String) {\n  users(where: {_or: [{username: {_ilike: $query}}, {name: {_ilike: $query}}]}) {\n    id\n    username\n    name\n    profile_image\n  }\n}\n`;\nexport const GET_USER_PROFILE = gql`\nquery getUserProfile($username: String!) {\n  users(where: {username: {_eq: $username}}) {\n    id\n    name\n    username\n    website\n    bio\n    profile_image\n    posts_aggregate {\n      aggregate {\n        count\n      }\n    }\n    followers_aggregate {\n      aggregate {\n        count\n      }\n    }\n    following_aggregate {\n      aggregate {\n        count\n      }\n    }\n    saved_posts(order_by: {created_at: desc}) {\n      post {\n        id\n        media\n        likes_aggregate {\n          aggregate {\n            count\n          }\n        }\n        comments_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    posts(order_by: {created_at: desc}) {\n      id\n      media\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n`;\nexport const SUGGEST_USERS = gql`\nquery suggestUsers($limit: Int!, $followerIds: [uuid!]!, $createdAt: timestamptz!) {\n  users(limit: $limit, where: {_or: [\n    {id: {_in: $followerIds}}, \n    {created_at: {_gt: $createdAt}}\n  ]}) {\n    id\n    username\n    name\n    profile_image\n  }\n}\n`; // posts with the most likes and comments at the top, \n// newest to the oldest where the posts are not from users we are following\n\nexport const EXPLORE_POSTS = gql`\nquery explorePosts($feedIds: [uuid!]!) {\n  posts(\n    order_by: {\n      created_at: desc, \n      likes_aggregate: {count: desc}, \n      comments_aggregate: {count: desc}\n    }\n    where: {user_id: {_nin: $feedIds}}\n    ) {\n    id\n    media\n    likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n`;\nexport const EXPLORE_MORE_POSTS = gql`\nquery getMorePostsFromUser($userId: uuid!, $postId: uuid!) {\n  posts(\n    limit: 6,\n    order_by: {created_at: desc, likes_aggregate: {count: desc}, comments_aggregate: {count: desc}},\n    where: {user_id: {_eq: $userId}, _not: {id: {_eq: $postId}}}\n  ){\n    id\n    media\n    likes_aggregate{\n      aggregate{\n        count\n      }\n    }\n    comments_aggregate{\n      aggregate{\n        count\n      }\n    }\n  }\n}\n`;\nexport const GET_POST = gql`\nquery getPost($postId: uuid!) {\n  posts_by_pk(id: $postId) {\n    id\n    user {\n      id\n      username\n    }\n  }\n}\n`;\nexport const GET_FEED = gql`\n  query getFeed($limit: Int!, $feedIds: [uuid!]!, $lastTimestamp: timestamptz) {\n    posts(\n      limit: $limit\n      where: { user_id: { _in: $feedIds }, created_at: { _lt: $lastTimestamp } }\n      order_by: { created_at: desc }\n    ) {\n      id\n      caption\n      created_at\n      media\n      location\n      user {\n        id\n        username\n        name\n        profile_image\n      }\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      likes {\n        id\n        user_id\n      }\n      saved_posts {\n        id\n        user_id\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments(order_by: { created_at: desc }, limit: 2) {\n        id\n        content\n        created_at\n        user {\n          username\n        }\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/jia78/Desktop/nyu-mscs/9223-cloud-computing/cloud-computing-proj/cloud-computing-proj/src/graphql/queries.js"],"names":["gql","CHECK_IF_USERNAME_TAKEN","GET_USER_EMAIL","GET_EDIT_USER_PROFILE","SEARCH_USERS","GET_USER_PROFILE","SUGGEST_USERS","EXPLORE_POSTS","EXPLORE_MORE_POSTS","GET_POST","GET_FEED"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AAEA,OAAO,MAAMC,uBAAuB,GAAGD,GAAI;;;;;;CAApC;AAQP,OAAO,MAAME,cAAc,GAAGF,GAAI;;;;;;;;CAA3B;AAUP,OAAO,MAAMG,qBAAqB,GAAGH,GAAI;;;;;;;;;;;;;CAAlC;AAeP,OAAO,MAAMI,YAAY,GAAGJ,GAAI;;;;;;;;;CAAzB;AAWP,OAAO,MAAMK,gBAAgB,GAAGL,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA7B;AA0DP,OAAO,MAAMM,aAAa,GAAGN,GAAI;;;;;;;;;;;;CAA1B,C,CAcP;AACA;;AACA,OAAO,MAAMO,aAAa,GAAGP,GAAI;;;;;;;;;;;;;;;;;;;;;;;;CAA1B;AA0BP,OAAO,MAAMQ,kBAAkB,GAAGR,GAAI;;;;;;;;;;;;;;;;;;;;;CAA/B;AAuBP,OAAO,MAAMS,QAAQ,GAAGT,GAAI;;;;;;;;;;CAArB;AAYP,OAAO,MAAMU,QAAQ,GAAGV,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAArB","sourcesContent":["import { gql } from \"apollo-boost\";\n\nexport const CHECK_IF_USERNAME_TAKEN = gql`\n  query checkIfUsernameTaken($username: String!) {\n    users(where: { username: { _eq: $username } }) {\n      username\n    }\n  }\n`;\n\nexport const GET_USER_EMAIL = gql`\nquery getUserEmail($input: String!) {\n  users(where: {\n    _or: [{username: {_eq: $input}}, {phone_number: {_eq: $input}}]\n  }) {\n    email\n  }\n}\n`\n\nexport const GET_EDIT_USER_PROFILE = gql`\nquery getEditUserProfile($id: uuid!) {\n  users_by_pk(id: $id) {\n    id\n    name\n    username\n    website\n    profile_image\n    phone_number\n    email\n    bio\n  }\n}\n`\n\nexport const SEARCH_USERS = gql`\nquery searchUsers($query: String) {\n  users(where: {_or: [{username: {_ilike: $query}}, {name: {_ilike: $query}}]}) {\n    id\n    username\n    name\n    profile_image\n  }\n}\n`\n\nexport const GET_USER_PROFILE = gql`\nquery getUserProfile($username: String!) {\n  users(where: {username: {_eq: $username}}) {\n    id\n    name\n    username\n    website\n    bio\n    profile_image\n    posts_aggregate {\n      aggregate {\n        count\n      }\n    }\n    followers_aggregate {\n      aggregate {\n        count\n      }\n    }\n    following_aggregate {\n      aggregate {\n        count\n      }\n    }\n    saved_posts(order_by: {created_at: desc}) {\n      post {\n        id\n        media\n        likes_aggregate {\n          aggregate {\n            count\n          }\n        }\n        comments_aggregate {\n          aggregate {\n            count\n          }\n        }\n      }\n    }\n    posts(order_by: {created_at: desc}) {\n      id\n      media\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n}\n`\n\nexport const SUGGEST_USERS = gql`\nquery suggestUsers($limit: Int!, $followerIds: [uuid!]!, $createdAt: timestamptz!) {\n  users(limit: $limit, where: {_or: [\n    {id: {_in: $followerIds}}, \n    {created_at: {_gt: $createdAt}}\n  ]}) {\n    id\n    username\n    name\n    profile_image\n  }\n}\n`\n\n// posts with the most likes and comments at the top, \n// newest to the oldest where the posts are not from users we are following\nexport const EXPLORE_POSTS = gql`\nquery explorePosts($feedIds: [uuid!]!) {\n  posts(\n    order_by: {\n      created_at: desc, \n      likes_aggregate: {count: desc}, \n      comments_aggregate: {count: desc}\n    }\n    where: {user_id: {_nin: $feedIds}}\n    ) {\n    id\n    media\n    likes_aggregate {\n      aggregate {\n        count\n      }\n    }\n    comments_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n}\n`\n\nexport const EXPLORE_MORE_POSTS = gql`\nquery getMorePostsFromUser($userId: uuid!, $postId: uuid!) {\n  posts(\n    limit: 6,\n    order_by: {created_at: desc, likes_aggregate: {count: desc}, comments_aggregate: {count: desc}},\n    where: {user_id: {_eq: $userId}, _not: {id: {_eq: $postId}}}\n  ){\n    id\n    media\n    likes_aggregate{\n      aggregate{\n        count\n      }\n    }\n    comments_aggregate{\n      aggregate{\n        count\n      }\n    }\n  }\n}\n`\n\nexport const GET_POST = gql`\nquery getPost($postId: uuid!) {\n  posts_by_pk(id: $postId) {\n    id\n    user {\n      id\n      username\n    }\n  }\n}\n`\n\nexport const GET_FEED = gql`\n  query getFeed($limit: Int!, $feedIds: [uuid!]!, $lastTimestamp: timestamptz) {\n    posts(\n      limit: $limit\n      where: { user_id: { _in: $feedIds }, created_at: { _lt: $lastTimestamp } }\n      order_by: { created_at: desc }\n    ) {\n      id\n      caption\n      created_at\n      media\n      location\n      user {\n        id\n        username\n        name\n        profile_image\n      }\n      likes_aggregate {\n        aggregate {\n          count\n        }\n      }\n      likes {\n        id\n        user_id\n      }\n      saved_posts {\n        id\n        user_id\n      }\n      comments_aggregate {\n        aggregate {\n          count\n        }\n      }\n      comments(order_by: { created_at: desc }, limit: 2) {\n        id\n        content\n        created_at\n        user {\n          username\n        }\n      }\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}