{"ast":null,"code":"var _jsxFileName = \"/Users/jia78/Desktop/nyu-mscs/9223-cloud-computing/cloud-computing-proj/cloud-computing-proj/src/components/post/AddPostDialog.js\";\nimport React from 'react';\nimport { createEditor } from 'slate';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { makeStyles, Toolbar, Typography, Dialog, AppBar, Button, Divider, Avatar, Paper, TextField, InputAdornment } from \"@material-ui/core\";\nimport { useAddPostDialogStyles } from '../../styles';\nimport { ArrowBackIos, PinDrop } from '@material-ui/icons';\nimport { UserContext } from '../../App';\nimport serialize from '../../utils/serialize';\nimport handleImageUpload from '../../utils/handleImageUpload';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { CREATE_POST } from '../../graphql/mutations';\nconst initialValue = [{\n  type: \"paragraph\",\n  children: [{\n    text: \"\"\n  }]\n}];\n\nconst AddPostDialog = ({\n  media,\n  handleClose\n}) => {\n  const {\n    me,\n    currentUserId\n  } = React.useContext(UserContext);\n  const classes = useAddPostDialogStyles();\n  const editor = React.useMemo(() => withReact(createEditor()), []);\n  const [value, setValue] = React.useState(initialValue);\n  const [location, setLocation] = React.useState('');\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [createPost] = useMutation(CREATE_POST);\n\n  function handleSharePost() {\n    setIsSubmitting(true);\n    handleImageUpload({\n      user: me,\n      media,\n      actionType: \"SHARE_POST\",\n      gqlFunction: createPost,\n      postData: {\n        userId: currentUserId,\n        location,\n        caption: serialize({\n          children: value\n        })\n      }\n    });\n    setIsSubmitting(false);\n  }\n\n  return React.createElement(Dialog, {\n    fullScreen: true,\n    open: true,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(AppBar, {\n    className: classes.appBar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    className: classes.toolbar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(ArrowBackIos, {\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    align: \"center\",\n    variant: \"body1\",\n    className: classes.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"New Post\"), React.createElement(Button, {\n    color: \"primary\",\n    className: classes.share,\n    disabled: isSubmitting,\n    onClick: handleSharePost,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Share\"))), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(Paper, {\n    className: classes.paper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Avatar, {\n    src: me.profile_image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Editable, {\n    className: classes.editor,\n    placeholder: \"Write your caption\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(Avatar, {\n    src: URL.createObjectURL(media),\n    className: classes.avatarLarge,\n    variant: \"square\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(TextField, {\n    fullWidth: true,\n    placeholder: \"Location\",\n    InputProps: {\n      classes: {\n        root: classes.root,\n        input: classes.input,\n        underline: classes.underline\n      },\n      startAdornment: React.createElement(InputAdornment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(PinDrop, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }))\n    },\n    onChange: event => setLocation(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n};\n\nexport default AddPostDialog;","map":{"version":3,"sources":["/Users/jia78/Desktop/nyu-mscs/9223-cloud-computing/cloud-computing-proj/cloud-computing-proj/src/components/post/AddPostDialog.js"],"names":["React","createEditor","Slate","Editable","withReact","makeStyles","Toolbar","Typography","Dialog","AppBar","Button","Divider","Avatar","Paper","TextField","InputAdornment","useAddPostDialogStyles","ArrowBackIos","PinDrop","UserContext","serialize","handleImageUpload","useMutation","useQuery","CREATE_POST","initialValue","type","children","text","AddPostDialog","media","handleClose","me","currentUserId","useContext","classes","editor","useMemo","value","setValue","useState","location","setLocation","isSubmitting","setIsSubmitting","createPost","handleSharePost","user","actionType","gqlFunction","postData","userId","caption","appBar","toolbar","title","share","paper","profile_image","URL","createObjectURL","avatarLarge","root","input","underline","startAdornment","event","target"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { createEditor } from 'slate';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { makeStyles, Toolbar, Typography, Dialog, AppBar, Button, Divider, Avatar, Paper, TextField, InputAdornment } from \"@material-ui/core\";\nimport { useAddPostDialogStyles } from '../../styles';\nimport { ArrowBackIos, PinDrop } from '@material-ui/icons';\nimport { UserContext } from '../../App';\nimport serialize from '../../utils/serialize';\nimport handleImageUpload from '../../utils/handleImageUpload';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { CREATE_POST } from '../../graphql/mutations';\n\n\n\nconst initialValue = [\n    {\n        type: \"paragraph\",\n        children: [{ text: \"\" }]\n    }\n];\n\n\nconst AddPostDialog = ({ media, handleClose }) => {\n    const { me, currentUserId } = React.useContext(UserContext);\n    const classes = useAddPostDialogStyles();\n    const editor = React.useMemo(() => withReact(createEditor()), []);\n    const [value, setValue] = React.useState(initialValue);\n    const [location, setLocation] = React.useState('');\n    const [isSubmitting, setIsSubmitting] = React.useState(false)\n    const [createPost] = useMutation(CREATE_POST);\n\n    function handleSharePost() {\n        setIsSubmitting(true);\n        handleImageUpload({\n            user: me,\n            media,\n            actionType: \"SHARE_POST\",\n            gqlFunction: createPost,\n            postData: {\n                userId: currentUserId,\n                location,\n                caption: serialize({ children: value }),\n            }\n        });\n        setIsSubmitting(false);\n    }\n\n    return (\n        <Dialog fullScreen open onClose={handleClose}>\n            <AppBar className={classes.appBar}>\n                <Toolbar className={classes.toolbar}>\n                    <ArrowBackIos onClick={handleClose} />\n                    <Typography align='center' variant='body1' className={classes.title}>\n                        New Post\n                    </Typography>\n                    <Button\n                        color=\"primary\"\n                        className={classes.share}\n                        disabled={isSubmitting}\n                        onClick={handleSharePost}\n                    >\n                        Share\n                    </Button>\n                </Toolbar>\n            </AppBar>\n            <Divider />\n            <Paper className={classes.paper}>\n                <Avatar src={me.profile_image} />\n                <Slate editor={editor} value={value} onChange={value => setValue(value)} >\n                    <Editable\n                        className={classes.editor}\n                        placeholder=\"Write your caption\"\n                    />\n                </Slate>\n                <Avatar\n                    src={URL.createObjectURL(media)}\n                    className={classes.avatarLarge}\n                    variant=\"square\"\n                />\n            </Paper>\n            <TextField\n                fullWidth\n                placeholder='Location'\n                InputProps={{\n                    classes: {\n                        root: classes.root,\n                        input: classes.input,\n                        underline: classes.underline\n                    },\n                    startAdornment: (\n                        <InputAdornment>\n                            <PinDrop />\n                        </InputAdornment>\n                    )\n                }}\n                onChange={event => setLocation(event.target.value)}\n            />\n        </Dialog>\n    )\n}\n\nexport default AddPostDialog;"]},"metadata":{},"sourceType":"module"}