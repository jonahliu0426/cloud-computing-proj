{"ast":null,"code":"var _jsxFileName = \"/Users/jia78/Desktop/nyu-mscs/9223-cloud-computing/cloud-computing-proj/cloud-computing-proj/src/auth.js\";\nimport { useMutation } from \"@apollo/client\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport React, { useState, useEffect } from \"react\";\nimport { CREATE_USER } from \"./graphql/mutations\";\nimport defaultUserImage from \"./images/default-user-image.jpg\"; // import App from \"./App\";\n\nconst provider = new firebase.auth.GoogleAuthProvider(); // Find these options in your Firebase console\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAO0g6u0abbolbazkZauGxTz-27N6Wcsv0\",\n  authDomain: \"instagram-react-webapp.firebaseapp.com\",\n  projectId: \"instagram-react-webapp\",\n  storageBucket: \"instagram-react-webapp.appspot.com\",\n  messagingSenderId: \"289019282994\",\n  appId: \"1:289019282994:web:024ab17e617eea40f95e2b\",\n  measurementId: \"G-0FHCP1GQC5\"\n});\nexport const AuthContext = React.createContext();\n\nfunction AuthProvider({\n  children\n}) {\n  const [authState, setAuthState] = useState({\n    status: \"loading\"\n  });\n  const [createUser] = useMutation(CREATE_USER);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const token = await user.getIdToken();\n        const idTokenResult = await user.getIdTokenResult();\n        const hasuraClaim = idTokenResult.claims[\"https://hasura.io/jwt/claims\"];\n\n        if (hasuraClaim) {\n          setAuthState({\n            status: \"in\",\n            user,\n            token\n          });\n        } else {\n          // Check if refresh is required.\n          const metadataRef = firebase.database().ref(\"metadata/\" + user.uid + \"/refreshTime\");\n          metadataRef.on(\"value\", async data => {\n            if (!data.exists) return; // Force refresh to pick up the latest custom claims changes.\n\n            const token = await user.getIdToken(true);\n            setAuthState({\n              status: \"in\",\n              user,\n              token\n            });\n          });\n        }\n      } else {\n        setAuthState({\n          status: \"out\"\n        });\n      }\n    });\n  }, []);\n\n  const logInWithGoogle = async () => {\n    const data = await firebase.auth().signInWithPopup(provider);\n\n    if (data.additionalUserInfo.isNewUser) {\n      // console.log({ data });\n      const {\n        uid,\n        displayName,\n        email,\n        photoURL\n      } = data.user;\n      const username = `${displayName.replace(/\\s+/g, \"\")}${uid.slice(-5)}`;\n      const variables = {\n        userId: uid,\n        name: displayName,\n        username,\n        email,\n        bio: \"\",\n        website: \"\",\n        phoneNumber: \"\",\n        profileImage: photoURL\n      };\n      await createUser({\n        variables\n      });\n    }\n  };\n\n  const logInWithEmailAndPassword = async (email, password) => {\n    const data = await firebase.auth().signInWithEmailAndPassword(email, password);\n    return data;\n  };\n\n  const signUpWithEmailAndPassword = async formData => {\n    const data = await firebase.auth().createUserWithEmailAndPassword(formData.email, formData.password);\n\n    if (data.additionalUserInfo.isNewUser) {\n      const variables = {\n        userId: data.user.uid,\n        name: formData.name,\n        username: formData.username,\n        email: data.user.email,\n        bio: \"\",\n        website: \"\",\n        phoneNumber: \"\",\n        profileImage: defaultUserImage\n      };\n      await createUser({\n        variables\n      });\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setAuthState({\n        status: \"loading\"\n      });\n      await firebase.auth().signOut();\n      setAuthState({\n        status: \"out\"\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updateEmail = async email => {\n    await authState.user.updateEmail(email);\n  };\n\n  if (authState.status === \"loading\") {\n    return null;\n  } else {\n    return React.createElement(AuthContext.Provider, {\n      value: {\n        authState,\n        logInWithGoogle,\n        signOut,\n        signUpWithEmailAndPassword,\n        logInWithEmailAndPassword,\n        updateEmail\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, children);\n  }\n}\n\nexport default AuthProvider;","map":{"version":3,"sources":["/Users/jia78/Desktop/nyu-mscs/9223-cloud-computing/cloud-computing-proj/cloud-computing-proj/src/auth.js"],"names":["useMutation","firebase","React","useState","useEffect","CREATE_USER","defaultUserImage","provider","auth","GoogleAuthProvider","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","AuthContext","createContext","AuthProvider","children","authState","setAuthState","status","createUser","onAuthStateChanged","user","token","getIdToken","idTokenResult","getIdTokenResult","hasuraClaim","claims","metadataRef","database","ref","uid","on","data","exists","logInWithGoogle","signInWithPopup","additionalUserInfo","isNewUser","displayName","email","photoURL","username","replace","slice","variables","userId","name","bio","website","phoneNumber","profileImage","logInWithEmailAndPassword","password","signInWithEmailAndPassword","signUpWithEmailAndPassword","formData","createUserWithEmailAndPassword","signOut","error","console","log","updateEmail"],"mappings":"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","sourcesContent":["import { useMutation } from \"@apollo/client\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport React, { useState, useEffect } from \"react\";\nimport { CREATE_USER } from \"./graphql/mutations\";\nimport defaultUserImage from \"./images/default-user-image.jpg\";\n// import App from \"./App\";\n\nconst provider = new firebase.auth.GoogleAuthProvider();\n\n// Find these options in your Firebase console\nfirebase.initializeApp({\n    apiKey: \"AIzaSyAO0g6u0abbolbazkZauGxTz-27N6Wcsv0\",\n    authDomain: \"instagram-react-webapp.firebaseapp.com\",\n    projectId: \"instagram-react-webapp\",\n    storageBucket: \"instagram-react-webapp.appspot.com\",\n    messagingSenderId: \"289019282994\",\n    appId: \"1:289019282994:web:024ab17e617eea40f95e2b\",\n    measurementId: \"G-0FHCP1GQC5\"\n});\n\nexport const AuthContext = React.createContext()\n\nfunction AuthProvider({ children }) {\n    const [authState, setAuthState] = useState({ status: \"loading\" });\n    const [createUser] = useMutation(CREATE_USER);\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged(async user => {\n            if (user) {\n                const token = await user.getIdToken();\n                const idTokenResult = await user.getIdTokenResult();\n                const hasuraClaim =\n                    idTokenResult.claims[\"https://hasura.io/jwt/claims\"];\n\n                if (hasuraClaim) {\n                    setAuthState({ status: \"in\", user, token });\n                } else {\n                    // Check if refresh is required.\n                    const metadataRef = firebase\n                        .database()\n                        .ref(\"metadata/\" + user.uid + \"/refreshTime\");\n\n                    metadataRef.on(\"value\", async (data) => {\n                        if (!data.exists) return\n                        // Force refresh to pick up the latest custom claims changes.\n                        const token = await user.getIdToken(true);\n                        setAuthState({ status: \"in\", user, token });\n                    });\n                }\n            } else {\n                setAuthState({ status: \"out\" });\n            }\n        });\n    }, []);\n\n    const logInWithGoogle = async () => {\n        const data = await firebase.auth().signInWithPopup(provider);\n        if (data.additionalUserInfo.isNewUser) {\n            // console.log({ data });\n            const { uid, displayName, email, photoURL } = data.user;\n            const username = `${displayName.replace(/\\s+/g, \"\")}${uid.slice(-5)}`;\n            const variables = {\n                userId: uid,\n                name: displayName,\n                username,\n                email,\n                bio: \"\",\n                website: \"\",\n                phoneNumber: \"\",\n                profileImage: photoURL,\n            };\n            await createUser({ variables });\n        }\n    };\n\n    const logInWithEmailAndPassword = async (email, password) => {\n        const data = await firebase.auth().signInWithEmailAndPassword(email, password);\n        return data;\n    }\n\n    const signUpWithEmailAndPassword = async (formData) => {\n        const data = await firebase.auth().createUserWithEmailAndPassword(formData.email, formData.password);\n        if (data.additionalUserInfo.isNewUser) {\n            const variables = {\n                userId: data.user.uid,\n                name: formData.name,\n                username: formData.username,\n                email: data.user.email,\n                bio: \"\",\n                website: \"\",\n                phoneNumber: \"\",\n                profileImage: defaultUserImage\n            }\n            await createUser({ variables })\n        }\n    }\n\n    const signOut = async () => {\n        try {\n            setAuthState({ status: \"loading\" });\n            await firebase.auth().signOut();\n            setAuthState({ status: \"out\" });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    const updateEmail = async (email) => {\n        await authState.user.updateEmail(email);\n    }\n\n    if (authState.status === \"loading\") {\n        return null;\n    } else {\n        return (\n            <AuthContext.Provider\n                value={{\n                    authState,\n                    logInWithGoogle,\n                    signOut,\n                    signUpWithEmailAndPassword,\n                    logInWithEmailAndPassword,\n                    updateEmail\n                }}\n            >\n                {children}\n            </AuthContext.Provider>\n        );\n    }\n}\n\nexport default AuthProvider;"]},"metadata":{},"sourceType":"module"}