{"ast":null,"code":"import { userInfo } from \"os\";\n\nconst handleImageUpload = async ({\n  user,\n  media,\n  stateFunction,\n  gqlFunction,\n  actionType,\n  postData\n}) => {\n  let myHeaders = new Headers();\n  let filename = media['name'];\n  console.log(filename);\n  myHeaders.append(\"Content-Type\", `image/${filename.slice(filename.lastIndexOf('.') + 1)}`);\n  let fr = new FileReader();\n  console.log(media);\n  fr.readAsArrayBuffer(media);\n  let file = null;\n\n  fr.onload = function () {\n    try {\n      file = new Uint8Array(fr.result);\n      let requestOptions = {\n        method: 'PUT',\n        headers: myHeaders,\n        body: file,\n        redirect: 'follow'\n      };\n      fetch(`https://urmkm2ivv6.execute-api.us-east-1.amazonaws.com/dev/upload/instagram-web-app-storage/${filename}`, requestOptions).then(async response => {\n        console.log(response);\n        const url = `https://instagram-web-app-storage.s3.amazonaws.com/${filename}`;\n\n        if (actionType === 'UPLOAD_AVATAR') {\n          const variables = {\n            id: user.id,\n            profileLink: url\n          };\n          gqlFunction({\n            variables\n          });\n          stateFunction(url);\n        } else if (actionType === 'SHARE_POST') {\n          const variables = { ...postData,\n            media: url\n          };\n          await gqlFunction({\n            variables\n          });\n          window.location.reload();\n        }\n      }).catch(error => console.error(error));\n    } catch (error) {\n      console.error('Error uploading profile image, ', error);\n      return error;\n    }\n  };\n};\n\nexport default handleImageUpload;","map":{"version":3,"sources":["/Users/jia78/Desktop/nyu-mscs/9223-cloud-computing/cloud-computing-proj/cloud-computing-proj/src/utils/handleImageUpload.js"],"names":["userInfo","handleImageUpload","user","media","stateFunction","gqlFunction","actionType","postData","myHeaders","Headers","filename","console","log","append","slice","lastIndexOf","fr","FileReader","readAsArrayBuffer","file","onload","Uint8Array","result","requestOptions","method","headers","body","redirect","fetch","then","response","url","variables","id","profileLink","window","location","reload","catch","error"],"mappings":"AAAA,SAASA,QAAT,QAAyB,IAAzB;;AAEA,MAAMC,iBAAiB,GAAG,OAAO;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,WAA9B;AAA2CC,EAAAA,UAA3C;AAAuDC,EAAAA;AAAvD,CAAP,KAA6E;AACnG,MAAIC,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACA,MAAIC,QAAQ,GAAGP,KAAK,CAAC,MAAD,CAApB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAF,EAAAA,SAAS,CAACK,MAAV,CAAiB,cAAjB,EAAkC,SAAQH,QAAQ,CAACI,KAAT,CAAeJ,QAAQ,CAACK,WAAT,CAAqB,GAArB,IAA4B,CAA3C,CAA8C,EAAxF;AACA,MAAIC,EAAE,GAAG,IAAIC,UAAJ,EAAT;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACAa,EAAAA,EAAE,CAACE,iBAAH,CAAqBf,KAArB;AACA,MAAIgB,IAAI,GAAG,IAAX;;AACAH,EAAAA,EAAE,CAACI,MAAH,GAAY,YAAY;AACpB,QAAI;AACAD,MAAAA,IAAI,GAAG,IAAIE,UAAJ,CAAeL,EAAE,CAACM,MAAlB,CAAP;AACA,UAAIC,cAAc,GAAG;AACjBC,QAAAA,MAAM,EAAE,KADS;AAEjBC,QAAAA,OAAO,EAAEjB,SAFQ;AAGjBkB,QAAAA,IAAI,EAAEP,IAHW;AAIjBQ,QAAAA,QAAQ,EAAE;AAJO,OAArB;AAOAC,MAAAA,KAAK,CAAE,+FAA8FlB,QAAS,EAAzG,EAA4Ga,cAA5G,CAAL,CACKM,IADL,CACU,MAAMC,QAAN,IAAkB;AACpBnB,QAAAA,OAAO,CAACC,GAAR,CAAYkB,QAAZ;AACA,cAAMC,GAAG,GAAI,sDAAqDrB,QAAS,EAA3E;;AAEA,YAAIJ,UAAU,KAAK,eAAnB,EAAoC;AAChC,gBAAM0B,SAAS,GAAG;AAAEC,YAAAA,EAAE,EAAE/B,IAAI,CAAC+B,EAAX;AAAeC,YAAAA,WAAW,EAAEH;AAA5B,WAAlB;AACA1B,UAAAA,WAAW,CAAC;AAAE2B,YAAAA;AAAF,WAAD,CAAX;AACA5B,UAAAA,aAAa,CAAC2B,GAAD,CAAb;AACH,SAJD,MAIO,IAAIzB,UAAU,KAAK,YAAnB,EAAiC;AACpC,gBAAM0B,SAAS,GAAG,EAAE,GAAGzB,QAAL;AAAeJ,YAAAA,KAAK,EAAE4B;AAAtB,WAAlB;AACA,gBAAM1B,WAAW,CAAC;AAAE2B,YAAAA;AAAF,WAAD,CAAjB;AACAG,UAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;AACJ,OAdL,EAeKC,KAfL,CAeWC,KAAK,IAAI5B,OAAO,CAAC4B,KAAR,CAAcA,KAAd,CAfpB;AAiBH,KA1BD,CA0BE,OAAOA,KAAP,EAAc;AACZ5B,MAAAA,OAAO,CAAC4B,KAAR,CAAc,iCAAd,EAAiDA,KAAjD;AACA,aAAOA,KAAP;AACH;AACJ,GA/BD;AAgCH,CAzCD;;AA2CA,eAAetC,iBAAf","sourcesContent":["import { userInfo } from \"os\";\n\nconst handleImageUpload = async ({ user, media, stateFunction, gqlFunction, actionType, postData }) => {\n    let myHeaders = new Headers();\n    let filename = media['name'];\n    console.log(filename)\n    myHeaders.append(\"Content-Type\", `image/${filename.slice(filename.lastIndexOf('.') + 1)}`);\n    let fr = new FileReader();\n    console.log(media);\n    fr.readAsArrayBuffer(media);\n    let file = null;\n    fr.onload = function () {\n        try {\n            file = new Uint8Array(fr.result);\n            let requestOptions = {\n                method: 'PUT',\n                headers: myHeaders,\n                body: file,\n                redirect: 'follow'\n            };\n\n            fetch(`https://urmkm2ivv6.execute-api.us-east-1.amazonaws.com/dev/upload/instagram-web-app-storage/${filename}`, requestOptions)\n                .then(async response => {\n                    console.log(response);\n                    const url = `https://instagram-web-app-storage.s3.amazonaws.com/${filename}`;\n\n                    if (actionType === 'UPLOAD_AVATAR') {\n                        const variables = { id: user.id, profileLink: url };\n                        gqlFunction({ variables });\n                        stateFunction(url);\n                    } else if (actionType === 'SHARE_POST') {\n                        const variables = { ...postData, media: url };\n                        await gqlFunction({ variables });\n                        window.location.reload();\n                    }\n                })\n                .catch(error => console.error(error));\n\n        } catch (error) {\n            console.error('Error uploading profile image, ', error);\n            return error;\n        }\n    }\n}\n\nexport default handleImageUpload"]},"metadata":{},"sourceType":"module"}